import os
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from datetime import datetime
import calendar

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = "data/data.csv"
os.makedirs("data", exist_ok=True)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ú–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º ===
months_ru = ["—è–Ω–≤–∞—Ä—å","—Ñ–µ–≤—Ä–∞–ª—å","–º–∞—Ä—Ç","–∞–ø—Ä–µ–ª—å","–º–∞–π","–∏—é–Ω—å",
             "–∏—é–ª—å","–∞–≤–≥—É—Å—Ç","—Å–µ–Ω—Ç—è–±—Ä—å","–æ–∫—Ç—è–±—Ä—å","–Ω–æ—è–±—Ä—å","–¥–µ–∫–∞–±—Ä—å"]

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü", callback_data="forecast")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", callback_data="forecast_next")],
        [InlineKeyboardButton(text="üìÖ –ü–ª–∞–Ω –ø–æ –¥–Ω—è–º (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)", callback_data="plan_by_days")],
        [InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞", callback_data="add_data")],
        [InlineKeyboardButton(text="üßæ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="show_data")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="clear_forecast")]
    ])

# === /start ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø TableTrend ‚Äî –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã—Ä—É—á–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü üìÖ",
        reply_markup=main_menu()
    )

# === –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===
@dp.callback_query(lambda c: c.data == "clear_forecast")
async def clear_forecast(callback: types.CallbackQuery):
    folder = "data"
    deleted = 0
    for file in os.listdir(folder):
        if file.startswith("forecast_") and file.endswith(".png"):
            os.remove(os.path.join(folder, file))
            deleted += 1
    await callback.message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {deleted}")

# === –ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö ===
@dp.callback_query(lambda c: c.data == "show_data")
async def show_data(callback: types.CallbackQuery):
    if not os.path.exists(DATA_FILE):
        await callback.message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    df = pd.read_csv(DATA_FILE)
    text = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:\n\n{df.tail(10).to_string(index=False)}"
    await callback.message.answer(f"<pre>{text}</pre>", parse_mode="HTML")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–∞ ===
user_inputs = {}

@dp.callback_query(lambda c: c.data == "add_data")
async def add_data(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_inputs[user_id] = {}
    await callback.message.answer("üóì –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–û–∫—Ç—è–±—Ä—å 2025`", parse_mode="Markdown")

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_inputs:
        return
    step = user_inputs[user_id]

    if "month" not in step:
        month_text = message.text.strip()
        month_str = month_text.lower().split()[0]
        if month_str not in months_ru:
            await message.answer("‚ùå –ú–µ—Å—è—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –û–∫—Ç—è–±—Ä—å 2025")
            return
        step["month"] = month_text
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –∑–∞ –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567):")
    elif "revenue" not in step:
        try:
            step["revenue"] = float(message.text.strip())
            await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∑–∞ –º–µ—Å—è—Ü:")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1200000")
    elif "guests" not in step:
        try:
            step["guests"] = int(message.text.strip())
            await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 845):")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1400")
    elif "avg_check" not in step:
        try:
            step["avg_check"] = float(message.text.strip())

            month_text = step["month"]
            month_str = month_text.lower().split()[0]
            month_num = months_ru.index(month_str) + 1
            year = int(month_text.split()[-1])
            ds = datetime(year, month_num, 1).strftime("%Y-%m-%d")

            new_row = pd.DataFrame([{
                "ds": ds,
                "revenue": step["revenue"],
                "guests": step["guests"],
                "avg_check": step["avg_check"]
            }])

            if os.path.exists(DATA_FILE):
                df = pd.read_csv(DATA_FILE)
                df["ds"] = pd.to_datetime(df["ds"])
                if ds in df["ds"].dt.strftime("%Y-%m-%d").values:
                    df.loc[df["ds"].dt.strftime("%Y-%m-%d") == ds, ["revenue","guests","avg_check"]] = step["revenue"], step["guests"], step["avg_check"]
                else:
                    df = pd.concat([df, new_row], ignore_index=True)
            else:
                df = new_row
            df.to_csv(DATA_FILE, index=False)

            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n\n"
                f"üóì {step['month']}\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: {int(step['revenue']):,} ‚ÇΩ\n"
                f"üë• –ì–æ—Å—Ç–∏: {step['guests']}\n"
                f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(step['avg_check'])} ‚ÇΩ\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ üëâ /start",
                parse_mode="HTML"
            )
            del user_inputs[user_id]
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞.")

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏ ===
titles = {"revenue":"–í—ã—Ä—É—á–∫–∞","guests":"–ì–æ—Å—Ç–∏","avg_check":"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"}

def forecast_metric(monthly, metric):
    monthly = monthly.sort_values("ds").reset_index(drop=True)

    if metric in ["guests", "avg_check"]:
        next_val = monthly[metric].tail(2).mean()
        last_val = monthly[metric].iloc[-1]
        diff = (next_val - last_val) / last_val * 100
        trend = "üìà –†–∞—Å—Ç–µ—Ç" if next_val > last_val else "üìâ –ü–∞–¥–∞–µ—Ç"

        last_6 = monthly[metric].tail(6)
        y_min = last_6.min()
        y_max = last_6.max()

        plt.figure(figsize=(7,4))
        plt.plot(monthly["ds"], monthly[metric], marker="o", label="–§–∞–∫—Ç")
        plt.scatter(monthly["ds"].iloc[-1], last_val, color='green', s=100, label="–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
        next_month = monthly["ds"].iloc[-1] + pd.DateOffset(months=1)
        plt.scatter(next_month, next_val, color='orange', s=100, label="–ü—Ä–æ–≥–Ω–æ–∑")
        plt.fill_between([next_month], y_min, y_max, color='orange', alpha=0.2)
        plt.title(f"{titles[metric]}: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ({trend})")
        plt.xlabel("–ú–µ—Å—è—Ü")
        plt.ylabel(titles[metric])
        plt.ylim(0, max(monthly[metric].max(), y_max)*1.2)
        plt.legend()
        plt.tight_layout()
        img_path = f"data/forecast_{metric}.png"
        plt.savefig(img_path)
        plt.close()

        caption = (
            f"{titles[metric]}\n\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {int(next_val):,}\n"
            f"üìâ –ú–∏–Ω–∏–º—É–º: {int(y_min):,}\n"
            f"üìà –ú–∞–∫—Å–∏–º—É–º: {int(y_max):,}\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:+.1f}%\n"
            f"üí° –¢—Ä–µ–Ω–¥: {trend}"
        ).replace(",", " ")
        return img_path, caption

    else:
        monthly[f"{metric}_lag1"] = monthly[metric].shift(1)
        monthly[f"{metric}_lag1"].fillna(monthly[metric].mean(), inplace=True)
        model = Prophet(yearly_seasonality=False, weekly_seasonality=False, daily_seasonality=False)
        model.add_regressor(f"{metric}_lag1")
        df_model = monthly.rename(columns={metric: "y"})[["ds", "y", f"{metric}_lag1"]]
        model.fit(df_model)
        future = model.make_future_dataframe(periods=1, freq="M")
        future[f"{metric}_lag1"] = list(monthly[f"{metric}_lag1"]) + [monthly[metric].iloc[-1]]
        forecast_df = model.predict(future)
        last_val = monthly[metric].iloc[-1]
        next_val = forecast_df["yhat"].iloc[-1]
        diff = (next_val - last_val) / last_val * 100
        trend = "üìà –†–∞—Å—Ç–µ—Ç" if next_val > last_val else "üìâ –ü–∞–¥–∞–µ—Ç"

        plt.figure(figsize=(7,4))
        plt.plot(monthly["ds"], monthly[metric], marker="o", label="–§–∞–∫—Ç")
        plt.plot(forecast_df["ds"], forecast_df["yhat"], "--", label="–ü—Ä–æ–≥–Ω–æ–∑", color="orange")
        plt.fill_between(forecast_df["ds"], forecast_df["yhat_lower"], forecast_df["yhat_upper"], color='orange', alpha=0.2)
        plt.scatter(monthly["ds"].iloc[-1], last_val, color='green', s=100, label="–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
        plt.title(f"{titles[metric]}: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ({trend})")
        plt.xlabel("–ú–µ—Å—è—Ü")
        plt.ylabel(titles[metric])
        plt.ylim(0, max(monthly[metric].max(), forecast_df["yhat"].max())*1.2)
        plt.legend()
        plt.tight_layout()
        img_path = f"data/forecast_{metric}.png"
        plt.savefig(img_path)
        plt.close()

        caption = (
            f"{titles[metric]}\n\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {int(next_val):,}\n"
            f"üìâ –ú–∏–Ω–∏–º—É–º: {int(forecast_df['yhat_lower'].iloc[-1]):,}\n"
            f"üìà –ú–∞–∫—Å–∏–º—É–º: {int(forecast_df['yhat_upper'].iloc[-1]):,}\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:+.1f}%\n"
            f"üí° –¢—Ä–µ–Ω–¥: {trend}"
        ).replace(",", " ")
        return img_path, caption

# === –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü ===
@dp.callback_query(lambda c: c.data == "forecast")
async def forecast(callback: types.CallbackQuery):
    if not os.path.exists(DATA_FILE):
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    df = pd.read_csv(DATA_FILE, parse_dates=["ds"])
    df["ds"] = pd.to_datetime(df["ds"])
    monthly = df.resample("M", on="ds").agg({"revenue":"sum","guests":"sum","avg_check":"mean"}).reset_index()
    monthly = monthly.sort_values("ds").reset_index(drop=True)
    monthly = monthly[["ds","revenue","guests","avg_check"]]

    if len(monthly) < 6:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤).")
        return

    metrics = ["revenue", "guests", "avg_check"]
    for metric in metrics:
        img, caption = forecast_metric(monthly, metric)
        await callback.message.answer_photo(photo=types.FSInputFile(img), caption=caption)

# === –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ===
@dp.callback_query(lambda c: c.data == "forecast_next")
async def forecast_next(callback: types.CallbackQuery):
    if not os.path.exists(DATA_FILE):
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    df = pd.read_csv(DATA_FILE, parse_dates=["ds"])
    df["ds"] = pd.to_datetime(df["ds"])
    monthly = df.resample("M", on="ds").agg({"revenue":"sum","guests":"sum","avg_check":"mean"}).reset_index()
    monthly = monthly.sort_values("ds").reset_index(drop=True)

    if len(monthly) < 2:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞).")
        return

    next_month = monthly["ds"].iloc[-1] + pd.DateOffset(months=1)
    next_month_str = next_month.strftime("%B %Y")

    metrics = ["revenue", "guests", "avg_check"]
    for metric in metrics:
        if metric in ["guests", "avg_check"]:
            next_val = monthly[metric].tail(2).mean()
            last_val = monthly[metric].iloc[-1]
            diff = (next_val - last_val) / last_val * 100
            trend = "üìà –†–∞—Å—Ç–µ—Ç" if next_val > last_val else "üìâ –ü–∞–¥–∞–µ—Ç"

            last_6 = monthly[metric].tail(6)
            y_min = last_6.min()
            y_max = last_6.max()

            plt.figure(figsize=(7,4))
            plt.plot(monthly["ds"], monthly[metric], marker="o", label="–§–∞–∫—Ç")
            plt.scatter(monthly["ds"].iloc[-1], last_val, color='green', s=100, label="–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
            plt.scatter(next_month, next_val, color='orange', s=100, label="–ü—Ä–æ–≥–Ω–æ–∑")
            plt.fill_between([next_month], y_min, y_max, color='orange', alpha=0.2)
            plt.title(f"{titles[metric]}: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {next_month_str} ({trend})")
            plt.xlabel("–ú–µ—Å—è—Ü")
            plt.ylabel(titles[metric])
            plt.ylim(0, max(monthly[metric].max(), y_max)*1.2)
            plt.legend()
            plt.tight_layout()
            img_path = f"data/forecast_next_{metric}.png"
            plt.savefig(img_path)
            plt.close()

            caption = (
                f"{titles[metric]} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {next_month_str}\n\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {int(next_val):,}\n"
                f"üìâ –ú–∏–Ω–∏–º—É–º: {int(y_min):,}\n"
                f"üìà –ú–∞–∫—Å–∏–º—É–º: {int(y_max):,}\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:+.1f}%\n"
                f"üí° –¢—Ä–µ–Ω–¥: {trend}"
            ).replace(",", " ")
            await callback.message.answer_photo(photo=types.FSInputFile(img_path), caption=caption)
        else:
            monthly[f"{metric}_lag1"] = monthly[metric].shift(1)
            monthly[f"{metric}_lag1"].fillna(monthly[metric].mean(), inplace=True)
            model = Prophet(yearly_seasonality=False, weekly_seasonality=False, daily_seasonality=False)
            model.add_regressor(f"{metric}_lag1")
            df_model = monthly.rename(columns={metric: "y"})[["ds", "y", f"{metric}_lag1"]]
            model.fit(df_model)
            future = model.make_future_dataframe(periods=1, freq="M")
            future[f"{metric}_lag1"] = list(monthly[f"{metric}_lag1"]) + [monthly[metric].iloc[-1]]
            forecast_df = model.predict(future)
            last_val = monthly[metric].iloc[-1]
            next_val = forecast_df["yhat"].iloc[-1]
            diff = (next_val - last_val) / last_val * 100
            trend = "üìà –†–∞—Å—Ç–µ—Ç" if next_val > last_val else "üìâ –ü–∞–¥–∞–µ—Ç"

            plt.figure(figsize=(7,4))
            plt.plot(monthly["ds"], monthly[metric], marker="o", label="–§–∞–∫—Ç")
            plt.plot(forecast_df["ds"], forecast_df["yhat"], "--", label="–ü—Ä–æ–≥–Ω–æ–∑", color="orange")
            plt.fill_between(forecast_df["ds"], forecast_df["yhat_lower"], forecast_df["yhat_upper"], color='orange', alpha=0.2)
            plt.scatter(monthly["ds"].iloc[-1], last_val, color='green', s=100, label="–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü")
            plt.title(f"{titles[metric]}: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {next_month_str} ({trend})")
            plt.xlabel("–ú–µ—Å—è—Ü")
            plt.ylabel(titles[metric])
            plt.ylim(0, max(monthly[metric].max(), forecast_df["yhat"].max())*1.2)
            plt.legend()
            plt.tight_layout()
            img_path = f"data/forecast_next_{metric}.png"
            plt.savefig(img_path)
            plt.close()

            caption = (
                f"{titles[metric]} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {next_month_str}\n\n"
                f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {int(next_val):,}\n"
                f"üìâ –ú–∏–Ω–∏–º—É–º: {int(forecast_df['yhat_lower'].iloc[-1]):,}\n"
                f"üìà –ú–∞–∫—Å–∏–º—É–º: {int(forecast_df['yhat_upper'].iloc[-1]):,}\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {diff:+.1f}%\n"
                f"üí° –¢—Ä–µ–Ω–¥: {trend}"
            ).replace(",", " ")
            await callback.message.answer_photo(photo=types.FSInputFile(img_path), caption=caption)

# === –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –ü–ª–∞–Ω –ø–æ –¥–Ω—è–º (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ) ===
@dp.callback_query(lambda c: c.data == "plan_by_days")
async def plan_by_days(callback: types.CallbackQuery):
    """
    –ë–µ—Ä—ë–º —Ç–æ—Ç –∂–µ monthly, —á—Ç–æ –∏ –≤ forecast_next.
    –°—Ç—Ä–æ–∏–º –ø—Ä–æ–≥–Ω–æ–∑ —Å—É–º–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –¥–ª—è revenue (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å lag1).
    –ó–∞—Ç–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç—É —Å—É–º–º—É –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤–µ—Å–∞–º –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç), –ø—Ä–∏ —ç—Ç–æ–º —Å—É–º–º–∞ –ø–æ –¥–Ω—è–º == –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Å—É–º–º–µ.
    """
    if not os.path.exists(DATA_FILE):
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        return

    df = pd.read_csv(DATA_FILE, parse_dates=["ds"])
    df["ds"] = pd.to_datetime(df["ds"])
    monthly = df.resample("M", on="ds").agg({"revenue":"sum","guests":"sum","avg_check":"mean"}).reset_index()
    monthly = monthly.sort_values("ds").reset_index(drop=True)

    if len(monthly) < 2:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –º–µ—Å—è—Ü–∞).")
        return

    # --- –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (–∫–∞–∫ –≤ forecast_next –¥–ª—è revenue) ---
    metric = "revenue"
    monthly[f"{metric}_lag1"] = monthly[metric].shift(1)
    monthly[f"{metric}_lag1"].fillna(monthly[metric].mean(), inplace=True)

    model = Prophet(yearly_seasonality=False, weekly_seasonality=False, daily_seasonality=False)
    model.add_regressor(f"{metric}_lag1")
    df_model = monthly.rename(columns={metric: "y"})[["ds", "y", f"{metric}_lag1"]]
    model.fit(df_model)
    future = model.make_future_dataframe(periods=1, freq="M")
    future[f"{metric}_lag1"] = list(monthly[f"{metric}_lag1"]) + [monthly[metric].iloc[-1]]
    forecast_df = model.predict(future)

    next_month_val = float(forecast_df["yhat"].iloc[-1])  # –∏—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –º–µ—Å—è—Ü–∞
    next_month = monthly["ds"].iloc[-1] + pd.DateOffset(months=1)
    next_month_str = next_month.strftime("%B %Y")

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ---
    year = next_month.year
    month = next_month.month
    days_in_month = calendar.monthrange(year, month)[1]
    dates = pd.date_range(start=f"{year}-{month:02d}-01", periods=days_in_month, freq="D")

    # --- –í–µ—Å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å) ---
    # 0=–ü–Ω .. 6=–í—Å
    weekday_weights = {
        0: 0.95,  # –ü–Ω
        1: 1.00,  # –í—Ç
        2: 1.00,  # –°—Ä
        3: 1.05,  # –ß—Ç
        4: 1.10,  # –ü—Ç
        5: 1.30,  # –°–±
        6: 1.20   # –í—Å
    }

    plan_df = pd.DataFrame({"ds": dates})
    plan_df["weekday"] = plan_df["ds"].dt.weekday
    plan_df["weight"] = plan_df["weekday"].map(weekday_weights).fillna(1.0)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ forecast —Å—É–º–º—É
    total_weight = plan_df["weight"].sum()
    plan_df["revenue_plan_raw"] = plan_df["weight"] / total_weight * next_month_val

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —Ä—É–±–ª–µ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å—É–º–º–∞ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–ª–∞ —Å next_month_val
    plan_df["revenue_plan"] = plan_df["revenue_plan_raw"].round().astype(int)
    diff = int(round(next_month_val)) - int(plan_df["revenue_plan"].sum())
    if diff != 0:
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º: –¥–æ–±–∞–≤–ª—è–µ–º ¬±1 –∫ –¥–Ω—è–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –≤–µ—Å–æ–º (–µ—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π diff) –∏–ª–∏ —É–±–∏—Ä–∞–µ–º (–µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∫—É
        idx_sorted = plan_df.sort_values("weight", ascending=False).index
        i = 0
        step = 1 if diff > 0 else -1
        diff_abs = abs(diff)
        while diff_abs > 0:
            plan_df.at[idx_sorted[i % len(idx_sorted)], "revenue_plan"] += step
            diff_abs -= 1
            i += 1

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º —Å—É–º–º—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    total_plan = int(plan_df["revenue_plan"].sum())

    # --- –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞–Ω–∞ –ø–æ –¥–Ω—è–º ---
    plt.figure(figsize=(10, 4.5))
    plt.plot(plan_df["ds"], plan_df["revenue_plan"], marker="o", linewidth=1)
    plt.title(f"–ü–ª–∞–Ω –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º ‚Äî {next_month_str}")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)")
    plt.grid(alpha=0.25)
    plt.tight_layout()
    img_path = f"data/forecast_plan_by_days_{year}_{month}.png"
    plt.savefig(img_path)
    plt.close()

    # --- –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞) ---
    text_lines = [f"üìÖ –ü–ª–∞–Ω –≤—ã—Ä—É—á–∫–∏ –Ω–∞ {next_month_str} (–∏—Ç–æ–≥–æ: {total_plan:,} ‚ÇΩ)\n"]
    for _, r in plan_df.iterrows():
        weekday_name = r["ds"].strftime("%a")  # –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–Ω—è
        text_lines.append(f"{r['ds'].strftime('%d.%m.%Y')} ({weekday_name}) ‚Äî {int(r['revenue_plan']):,} ‚ÇΩ")
    text = "\n".join(text_lines).replace(",", " ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É + —Ç–µ–∫—Å—Ç
    await callback.message.answer_photo(photo=types.FSInputFile(img_path), caption=text)

# === –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
@dp.callback_query(lambda c: c.data == "analytics")
async def analytics(callback: types.CallbackQuery):
    if not os.path.exists(DATA_FILE):
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    df = pd.read_csv(DATA_FILE, parse_dates=["ds"])
    monthly = df.resample("M", on="ds").agg({"revenue":"sum","guests":"sum","avg_check":"mean"}).reset_index()

    avg_rev = monthly["revenue"].mean()
    avg_guests = monthly["guests"].mean()
    avg_check = monthly["avg_check"].mean()
    best_month = monthly.loc[monthly["revenue"].idxmax(), "ds"].strftime("%B %Y")
    worst_month = monthly.loc[monthly["revenue"].idxmin(), "ds"].strftime("%B %Y")

    text = (
        f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:\n\n"
        f"üí∞ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞: {int(avg_rev):,} ‚ÇΩ\n"
        f"üë• –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π: {int(avg_guests)}\n"
        f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(avg_check)} ‚ÇΩ\n\n"
        f"üèÜ –õ—É—á—à–∏–π –º–µ—Å—è—Ü: {best_month}\n"
        f"üìâ –°–ª–∞–±–µ–π—à–∏–π –º–µ—Å—è—Ü: {worst_month}"
    ).replace(",", " ")

    await callback.message.answer(text)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ TableTrend –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

