{\rtf1\ansi\ansicpg1251\cocoartf2865
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red93\green108\blue121;\red196\green26\blue22;\red15\green104\blue160;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\b\fs24 \cf2 \cb3 import
\f1\b0 \cf4  os\

\f0\b \cf2 import
\f1\b0 \cf4  pandas 
\f0\b \cf2 as
\f1\b0 \cf4  pd\

\f0\b \cf2 import
\f1\b0 \cf4  matplotlib.pyplot 
\f0\b \cf2 as
\f1\b0 \cf4  plt\

\f0\b \cf2 from
\f1\b0 \cf4  aiogram 
\f0\b \cf2 import
\f1\b0 \cf4  Bot, Dispatcher, types\

\f0\b \cf2 from
\f1\b0 \cf4  aiogram.types 
\f0\b \cf2 import
\f1\b0 \cf4  InlineKeyboardMarkup, InlineKeyboardButton\

\f0\b \cf2 from
\f1\b0 \cf4  aiogram.filters 
\f0\b \cf2 import
\f1\b0 \cf4  Command\

\f0\b \cf2 import
\f1\b0 \cf4  asyncio\

\f0\b \cf2 from
\f1\b0 \cf4  dotenv 
\f0\b \cf2 import
\f1\b0 \cf4  load_dotenv\

\f0\b \cf2 from
\f1\b0 \cf4  sklearn.linear_model 
\f0\b \cf2 import
\f1\b0 \cf4  LinearRegression\

\f0\b \cf2 import
\f1\b0 \cf4  numpy 
\f0\b \cf2 as
\f1\b0 \cf4  np\
\
\cf5 # === \uc0\u1047 \u1072 \u1075 \u1088 \u1091 \u1079 \u1082 \u1072  \u1090 \u1086 \u1082 \u1077 \u1085 \u1072  ===\cf4 \
load_dotenv()\
API_TOKEN = os.getenv(\cf6 "BOT_TOKEN"\cf4 )\
\
\cf5 # === \uc0\u1055 \u1091 \u1090 \u1080  \u1080  \u1092 \u1072 \u1081 \u1083 \u1099  ===\cf4 \
os.makedirs(\cf6 "data"\cf4 , exist_ok=
\f0\b \cf2 True
\f1\b0 \cf4 )\
DATA_FILE = \cf6 "data/data.csv"\cf4 \
\
\cf5 # === \uc0\u1057 \u1086 \u1079 \u1076 \u1072 \u1085 \u1080 \u1077  \u1073 \u1086 \u1090 \u1072  ===\cf4 \
bot = Bot(token=API_TOKEN)\
dp = Dispatcher()\
\
\cf5 # === \uc0\u1048 \u1085 \u1080 \u1094 \u1080 \u1072 \u1083 \u1080 \u1079 \u1072 \u1094 \u1080 \u1103  CSV ===\cf4 \

\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 not
\f1\b0 \cf4  os.path.exists(DATA_FILE):\
    df = pd.DataFrame(columns=[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 , \cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 , \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 , \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ])\
    df.to_csv(DATA_FILE, index=
\f0\b \cf2 False
\f1\b0 \cf4 , encoding=\cf6 "utf-8-sig"\cf4 )\

\f0\b \cf2 else
\f1\b0 \cf4 :\
    df = pd.read_csv(DATA_FILE, encoding=\cf6 "utf-8-sig"\cf4 )\
    expected_cols = [\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 , \cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 , \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 , \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ]\
    
\f0\b \cf2 for
\f1\b0 \cf4  col 
\f0\b \cf2 in
\f1\b0 \cf4  expected_cols:\
        
\f0\b \cf2 if
\f1\b0 \cf4  col 
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  df.columns:\
            df[col] = 
\f0\b \cf2 None
\f1\b0 \cf4 \
    df = df.reindex(columns=expected_cols)\
    df.to_csv(DATA_FILE, index=
\f0\b \cf2 False
\f1\b0 \cf4 , encoding=\cf6 "utf-8-sig"\cf4 )\
\
\cf5 # === \uc0\u1043 \u1083 \u1072 \u1074 \u1085 \u1086 \u1077  \u1084 \u1077 \u1085 \u1102  ===\cf4 \

\f0\b \cf2 def
\f1\b0 \cf4  \cf7 main_menu\cf4 ():\
    
\f0\b \cf2 return
\f1\b0 \cf4  InlineKeyboardMarkup(inline_keyboard=[\
        [InlineKeyboardButton(text=\cf6 "\uc0\u10133  \u1044 \u1086 \u1073 \u1072 \u1074 \u1080 \u1090 \u1100  \u1076 \u1072 \u1085 \u1085 \u1099 \u1077 "\cf4 , callback_data=\cf6 "add_data"\cf4 )],\
        [InlineKeyboardButton(text=\cf6 "\uc0\u55357 \u56522  \u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 "\cf4 , callback_data=\cf6 "forecast"\cf4 )],\
        [InlineKeyboardButton(text=\cf6 "\uc0\u55357 \u56520  \u1040 \u1085 \u1072 \u1083 \u1080 \u1090 \u1080 \u1082 \u1072 "\cf4 , callback_data=\cf6 "analytics"\cf4 )],\
        [InlineKeyboardButton(text=\cf6 "\uc0\u55358 \u56830  \u1055 \u1086 \u1082 \u1072 \u1079 \u1072 \u1090 \u1100  \u1076 \u1072 \u1085 \u1085 \u1099 \u1077 "\cf4 , callback_data=\cf6 "show_data"\cf4 )]\
    ])\
\
\cf5 # === \uc0\u1050 \u1086 \u1084 \u1072 \u1085 \u1076 \u1072  /start ===\cf4 \
@dp.message(Command(\cf6 "start"\cf4 ))\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 start\cf4 (message: types.Message):\
    
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u55357 \u56395  \u1055 \u1088 \u1080 \u1074 \u1077 \u1090 ! \u1071  \u1073 \u1086 \u1090  TableTrend.\\n\u1042 \u1099 \u1073 \u1077 \u1088 \u1080  \u1076 \u1077 \u1081 \u1089 \u1090 \u1074 \u1080 \u1077 :"\cf4 , reply_markup=main_menu())\
\
\cf5 # === \uc0\u1044 \u1086 \u1073 \u1072 \u1074 \u1083 \u1077 \u1085 \u1080 \u1077  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  ===\cf4 \
user_data = \{\}\
\
@dp.callback_query(
\f0\b \cf2 lambda
\f1\b0 \cf4  c: c.data == \cf6 "add_data"\cf4 )\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 add_data\cf4 (callback: types.CallbackQuery):\
    user_data[callback.from_user.id] = \{\}\
    
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer(\cf6 "\uc0\u55357 \u56517  \u1042 \u1074 \u1077 \u1076 \u1080  \u1085 \u1072 \u1079 \u1074 \u1072 \u1085 \u1080 \u1077  \u1084 \u1077 \u1089 \u1103 \u1094 \u1072  (\u1085 \u1072 \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 : '\u1054 \u1082 \u1090 \u1103 \u1073 \u1088 \u1100  2025'):"\cf4 )\
    
\f0\b \cf2 await
\f1\b0 \cf4  callback.answer()\
\
@dp.message()\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 handle_input\cf4 (message: types.Message):\
    user_id = message.from_user.id\
    
\f0\b \cf2 if
\f1\b0 \cf4  user_id 
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  user_data:\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    data = user_data[user_id]\
\
    \cf5 # 1. \uc0\u1052 \u1077 \u1089 \u1103 \u1094 \cf4 \
    
\f0\b \cf2 if
\f1\b0 \cf4  \cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4  
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  data:\
        data[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ] = message.text.strip()\
        
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u55357 \u56421  \u1042 \u1074 \u1077 \u1076 \u1080  \u1082 \u1086 \u1083 \u1080 \u1095 \u1077 \u1089 \u1090 \u1074 \u1086  \u1075 \u1086 \u1089 \u1090 \u1077 \u1081  \u1079 \u1072  \u1084 \u1077 \u1089 \u1103 \u1094 :"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    \cf5 # 2. \uc0\u1043 \u1086 \u1089 \u1090 \u1080 \cf4 \
    
\f0\b \cf2 elif
\f1\b0 \cf4  \cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4  
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  data:\
        
\f0\b \cf2 try
\f1\b0 \cf4 :\
            data[\cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 ] = float(message.text)\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u55357 \u56499  \u1042 \u1074 \u1077 \u1076 \u1080  \u1089 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081  \u1095 \u1077 \u1082  (\u8381 ):"\cf4 )\
        
\f0\b \cf2 except
\f1\b0 \cf4  ValueError:\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u9888 \u65039  \u1042 \u1074 \u1077 \u1076 \u1080  \u1095 \u1080 \u1089 \u1083 \u1086  \u1075 \u1086 \u1089 \u1090 \u1077 \u1081  (\u1085 \u1072 \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 : 15230)"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    \cf5 # 3. \uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081  \u1095 \u1077 \u1082 \cf4 \
    
\f0\b \cf2 elif
\f1\b0 \cf4  \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4  
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  data:\
        
\f0\b \cf2 try
\f1\b0 \cf4 :\
            data[\cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 ] = float(message.text)\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u55357 \u56496  \u1042 \u1074 \u1077 \u1076 \u1080  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1091  (\u8381 ):"\cf4 )\
        
\f0\b \cf2 except
\f1\b0 \cf4  ValueError:\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u9888 \u65039  \u1042 \u1074 \u1077 \u1076 \u1080  \u1095 \u1080 \u1089 \u1083 \u1086  (\u1085 \u1072 \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 : 1150)"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    \cf5 # 4. \uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 \cf4 \
    
\f0\b \cf2 elif
\f1\b0 \cf4  \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4  
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  data:\
        
\f0\b \cf2 try
\f1\b0 \cf4 :\
            data[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ] = float(message.text)\
\
            df = pd.read_csv(DATA_FILE, encoding=\cf6 "utf-8-sig"\cf4 )\
            df = pd.concat([df, pd.DataFrame([data])], ignore_index=
\f0\b \cf2 True
\f1\b0 \cf4 )\
\
            expected_cols = [\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 , \cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 , \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 , \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ]\
            
\f0\b \cf2 for
\f1\b0 \cf4  col 
\f0\b \cf2 in
\f1\b0 \cf4  expected_cols:\
                
\f0\b \cf2 if
\f1\b0 \cf4  col 
\f0\b \cf2 not
\f1\b0 \cf4  
\f0\b \cf2 in
\f1\b0 \cf4  df.columns:\
                    df[col] = 
\f0\b \cf2 None
\f1\b0 \cf4 \
            df = df.reindex(columns=expected_cols)\
\
            df.to_csv(DATA_FILE, index=
\f0\b \cf2 False
\f1\b0 \cf4 , encoding=\cf6 "utf-8-sig"\cf4 )\
\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u9989  \u1044 \u1072 \u1085 \u1085 \u1099 \u1077  \u1091 \u1089 \u1087 \u1077 \u1096 \u1085 \u1086  \u1076 \u1086 \u1073 \u1072 \u1074 \u1083 \u1077 \u1085 \u1099 !"\cf4 , reply_markup=main_menu())\
            
\f0\b \cf2 del
\f1\b0 \cf4  user_data[user_id]\
\
        
\f0\b \cf2 except
\f1\b0 \cf4  ValueError:\
            
\f0\b \cf2 await
\f1\b0 \cf4  message.answer(\cf6 "\uc0\u9888 \u65039  \u1042 \u1074 \u1077 \u1076 \u1080  \u1095 \u1080 \u1089 \u1083 \u1086  (\u1085 \u1072 \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 : 17500000)"\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
\cf5 # === \uc0\u1055 \u1086 \u1082 \u1072 \u1079 \u1072 \u1090 \u1100  \u1090 \u1072 \u1073 \u1083 \u1080 \u1094 \u1091  ===\cf4 \
@dp.callback_query(
\f0\b \cf2 lambda
\f1\b0 \cf4  c: c.data == \cf6 "show_data"\cf4 )\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 show_data\cf4 (callback: types.CallbackQuery):\
    df = pd.read_csv(DATA_FILE, encoding=\cf6 "utf-8-sig"\cf4 )\
    
\f0\b \cf2 if
\f1\b0 \cf4  df.empty:\
        
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer(\cf6 "\uc0\u55357 \u56514  \u1044 \u1072 \u1085 \u1085 \u1099 \u1093  \u1087 \u1086 \u1082 \u1072  \u1085 \u1077 \u1090 ."\cf4 )\
    
\f0\b \cf2 else
\f1\b0 \cf4 :\
        text = \cf6 "\uc0\u55357 \u56517  \u1058 \u1077 \u1082 \u1091 \u1097 \u1080 \u1077  \u1076 \u1072 \u1085 \u1085 \u1099 \u1077 :\\n\\n"\cf4 \
        
\f0\b \cf2 for
\f1\b0 \cf4  i, row 
\f0\b \cf2 in
\f1\b0 \cf4  df.iterrows():\
            text += f\cf6 "\{row['\uc0\u1052 \u1077 \u1089 \u1103 \u1094 ']\}: \{int(row['\u1043 \u1086 \u1089 \u1090 \u1080 '])\} \u1075 \u1086 \u1089 \u1090 \u1077 \u1081 , \u1095 \u1077 \u1082  \{int(row['\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 '])\}\u8381 , \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072  \{int(row['\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 '])\}\u8381 \\n"\cf4 \
        
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer(text)\
\
\cf5 # === \uc0\u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  \u1089  \u1083 \u1080 \u1085 \u1077 \u1081 \u1085 \u1086 \u1081  \u1088 \u1077 \u1075 \u1088 \u1077 \u1089 \u1089 \u1080 \u1077 \u1081  ===\cf4 \
@dp.callback_query(
\f0\b \cf2 lambda
\f1\b0 \cf4  c: c.data == \cf6 "forecast"\cf4 )\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 forecast\cf4 (callback: types.CallbackQuery):\
    df = pd.read_csv(DATA_FILE, encoding=\cf6 "utf-8-sig"\cf4 )\
    df = df.dropna(subset=[\cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 , \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 , \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ])\
\
    
\f0\b \cf2 if
\f1\b0 \cf4  len(df) < \cf8 2\cf4 :\
        
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer(\cf6 "\uc0\u9888 \u65039  \u1053 \u1077 \u1076 \u1086 \u1089 \u1090 \u1072 \u1090 \u1086 \u1095 \u1085 \u1086  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1076 \u1083 \u1103  \u1087 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 \u1072  (\u1085 \u1091 \u1078 \u1085 \u1086  \u1084 \u1080 \u1085 \u1080 \u1084 \u1091 \u1084  2 \u1084 \u1077 \u1089 \u1103 \u1094 \u1072 )."\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    df = df.reset_index(drop=
\f0\b \cf2 True
\f1\b0 \cf4 )\
    X = np.arange(len(df)).reshape(\cf8 -1\cf4 , \cf8 1\cf4 )\
    y_revenue = df[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ].values\
\
    model = LinearRegression()\
    model.fit(X, y_revenue)\
    next_month_idx = np.array([[len(df)]])\
    forecast_revenue = model.predict(next_month_idx)[\cf8 0\cf4 ]\
\
    plt.figure(figsize=(\cf8 8\cf4 , \cf8 4\cf4 ))\
    plt.plot(df[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ], y_revenue, marker=\cf6 "o"\cf4 , label=\cf6 "\uc0\u1060 \u1072 \u1082 \u1090 "\cf4 )\
    plt.plot(list(df[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ]) + [\cf6 "\uc0\u1057 \u1083 \u1077 \u1076 . \u1084 \u1077 \u1089 \u1103 \u1094 "\cf4 ], list(y_revenue) + [forecast_revenue],\
             marker=\cf6 "o"\cf4 , linestyle=\cf6 "--"\cf4 , color=\cf6 "orange"\cf4 , label=\cf6 "\uc0\u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 "\cf4 )\
    plt.title(\cf6 "\uc0\u55357 \u56522  \u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1080  (\u1083 \u1080 \u1085 \u1077 \u1081 \u1085 \u1072 \u1103  \u1088 \u1077 \u1075 \u1088 \u1077 \u1089 \u1089 \u1080 \u1103 )"\cf4 )\
    plt.xticks(rotation=\cf8 45\cf4 )\
    plt.legend()\
    plt.tight_layout()\
    plt.savefig(\cf6 "data/forecast.png"\cf4 )\
    plt.close()\
\
    text = (\
        f\cf6 "\uc0\u55357 \u56622  \u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  (\u1083 \u1080 \u1085 \u1077 \u1081 \u1085 \u1072 \u1103  \u1088 \u1077 \u1075 \u1088 \u1077 \u1089 \u1089 \u1080 \u1103 ):\\n\\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56496  \u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1080  \u1089 \u1083 \u1077 \u1076 \u1091 \u1102 \u1097 \u1077 \u1075 \u1086  \u1084 \u1077 \u1089 \u1103 \u1094 \u1072 : \{int(forecast_revenue):,\} \u8381 "\cf4 \
    ).replace(\cf6 ","\cf4 , \cf6 " "\cf4 )\
\
    
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer_photo(photo=types.FSInputFile(\cf6 "data/forecast.png"\cf4 ), caption=text)\
\
\cf5 # === \uc0\u1040 \u1085 \u1072 \u1083 \u1080 \u1090 \u1080 \u1082 \u1072  \u1089  \u1087 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 \u1086 \u1084  ===\cf4 \
@dp.callback_query(
\f0\b \cf2 lambda
\f1\b0 \cf4  c: c.data == \cf6 "analytics"\cf4 )\

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 analytics\cf4 (callback: types.CallbackQuery):\
    df = pd.read_csv(DATA_FILE, encoding=\cf6 "utf-8-sig"\cf4 )\
    df = df.dropna(subset=[\cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 , \cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 , \cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ])\
\
    
\f0\b \cf2 if
\f1\b0 \cf4  df.empty:\
        
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer(\cf6 "\uc0\u9888 \u65039  \u1053 \u1077 \u1090  \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1076 \u1083 \u1103  \u1072 \u1085 \u1072 \u1083 \u1080 \u1079 \u1072 ."\cf4 )\
        
\f0\b \cf2 return
\f1\b0 \cf4 \
\
    avg_check = df[\cf6 "\uc0\u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081 _\u1095 \u1077 \u1082 "\cf4 ].mean()\
    avg_guests = df[\cf6 "\uc0\u1043 \u1086 \u1089 \u1090 \u1080 "\cf4 ].mean()\
    avg_revenue = df[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ].mean()\
    max_month = df.loc[df[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ].idxmax(), \cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ]\
    min_month = df.loc[df[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ].idxmin(), \cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ]\
\
    \cf5 # \uc0\u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  \u1083 \u1080 \u1085 \u1077 \u1081 \u1085 \u1086 \u1081  \u1088 \u1077 \u1075 \u1088 \u1077 \u1089 \u1089 \u1080 \u1077 \u1081 \cf4 \
    df = df.reset_index(drop=
\f0\b \cf2 True
\f1\b0 \cf4 )\
    X = np.arange(len(df)).reshape(\cf8 -1\cf4 , \cf8 1\cf4 )\
    y_revenue = df[\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 ].values\
    model = LinearRegression()\
    model.fit(X, y_revenue)\
    next_month_idx = np.array([[len(df)]])\
    forecast_revenue = model.predict(next_month_idx)[\cf8 0\cf4 ]\
\
    text = (\
        f\cf6 "\uc0\u55357 \u56520  \u1040 \u1085 \u1072 \u1083 \u1080 \u1090 \u1080 \u1082 \u1072 :\\n\\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56496  \u1057 \u1088 \u1077 \u1076 \u1085 \u1103 \u1103  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 : \{int(avg_revenue):,\} \u8381 \\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56421  \u1057 \u1088 \u1077 \u1076 \u1085 \u1077 \u1077  \u1082 \u1086 \u1083 \u1080 \u1095 \u1077 \u1089 \u1090 \u1074 \u1086  \u1075 \u1086 \u1089 \u1090 \u1077 \u1081 : \{int(avg_guests)\}\\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56499  \u1057 \u1088 \u1077 \u1076 \u1085 \u1080 \u1081  \u1095 \u1077 \u1082 : \{int(avg_check)\} \u8381 \\n\\n"\cf4 \
        f\cf6 "\uc0\u55356 \u57286  \u1051 \u1091 \u1095 \u1096 \u1080 \u1081  \u1084 \u1077 \u1089 \u1103 \u1094 : \{max_month\}\\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56521  \u1057 \u1083 \u1072 \u1073 \u1077 \u1081 \u1096 \u1080 \u1081  \u1084 \u1077 \u1089 \u1103 \u1094 : \{min_month\}\\n\\n"\cf4 \
        f\cf6 "\uc0\u55357 \u56622  \u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1080  \u1089 \u1083 \u1077 \u1076 \u1091 \u1102 \u1097 \u1077 \u1075 \u1086  \u1084 \u1077 \u1089 \u1103 \u1094 \u1072 : \{int(forecast_revenue):,\} \u8381 "\cf4 \
    ).replace(\cf6 ","\cf4 , \cf6 " "\cf4 )\
\
    plt.figure(figsize=(\cf8 8\cf4 , \cf8 4\cf4 ))\
    plt.plot(df[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ], y_revenue, marker=\cf6 "o"\cf4 , label=\cf6 "\uc0\u1042 \u1099 \u1088 \u1091 \u1095 \u1082 \u1072 "\cf4 )\
    plt.plot(list(df[\cf6 "\uc0\u1052 \u1077 \u1089 \u1103 \u1094 "\cf4 ]) + [\cf6 "\uc0\u1057 \u1083 \u1077 \u1076 . \u1084 \u1077 \u1089 \u1103 \u1094 "\cf4 ], list(y_revenue) + [forecast_revenue],\
             marker=\cf6 "o"\cf4 , linestyle=\cf6 "--"\cf4 , color=\cf6 "orange"\cf4 , label=\cf6 "\uc0\u1055 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 "\cf4 )\
    plt.title(\cf6 "\uc0\u1044 \u1080 \u1085 \u1072 \u1084 \u1080 \u1082 \u1072  \u1074 \u1099 \u1088 \u1091 \u1095 \u1082 \u1080  \u1089  \u1087 \u1088 \u1086 \u1075 \u1085 \u1086 \u1079 \u1086 \u1084 "\cf4 )\
    plt.xticks(rotation=\cf8 45\cf4 )\
    plt.legend()\
    plt.tight_layout()\
    plt.savefig(\cf6 "data/analytics.png"\cf4 )\
    plt.close()\
\
    
\f0\b \cf2 await
\f1\b0 \cf4  callback.message.answer_photo(photo=types.FSInputFile(\cf6 "data/analytics.png"\cf4 ), caption=text)\
\
\cf5 # === \uc0\u1047 \u1072 \u1087 \u1091 \u1089 \u1082  ===\cf4 \

\f0\b \cf2 async
\f1\b0 \cf4  
\f0\b \cf2 def
\f1\b0 \cf4  \cf7 main\cf4 ():\
    print(\cf6 "\uc0\u9989  \u1041 \u1086 \u1090  \u1079 \u1072 \u1087 \u1091 \u1097 \u1077 \u1085  \u1080  \u1088 \u1072 \u1073 \u1086 \u1090 \u1072 \u1077 \u1090 !"\cf4 )\
    
\f0\b \cf2 await
\f1\b0 \cf4  dp.start_polling(bot)\
\

\f0\b \cf2 if
\f1\b0 \cf4  __name__ == \cf6 "__main__"\cf4 :\
    asyncio.run(main())\
}